-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 37


-- !query 0
set spark.sql.crossJoin.enabled=true
-- !query 0 schema
struct<key:string,value:string>
-- !query 0 output
spark.sql.crossJoin.enabled	true


-- !query 1
CREATE TABLE CASE_TBL (
  i integer,
  f double
) USING parquet
-- !query 1 schema
struct<>
-- !query 1 output



-- !query 2
CREATE TABLE CASE2_TBL (
  i integer,
  j integer
) USING parquet
-- !query 2 schema
struct<>
-- !query 2 output



-- !query 3
INSERT INTO CASE_TBL VALUES (1, 10.1)
-- !query 3 schema
struct<>
-- !query 3 output



-- !query 4
INSERT INTO CASE_TBL VALUES (2, 20.2)
-- !query 4 schema
struct<>
-- !query 4 output



-- !query 5
INSERT INTO CASE_TBL VALUES (3, -30.3)
-- !query 5 schema
struct<>
-- !query 5 output



-- !query 6
INSERT INTO CASE_TBL VALUES (4, NULL)
-- !query 6 schema
struct<>
-- !query 6 output



-- !query 7
INSERT INTO CASE2_TBL VALUES (1, -1)
-- !query 7 schema
struct<>
-- !query 7 output



-- !query 8
INSERT INTO CASE2_TBL VALUES (2, -2)
-- !query 8 schema
struct<>
-- !query 8 output



-- !query 9
INSERT INTO CASE2_TBL VALUES (3, -3)
-- !query 9 schema
struct<>
-- !query 9 output



-- !query 10
INSERT INTO CASE2_TBL VALUES (2, -4)
-- !query 10 schema
struct<>
-- !query 10 output



-- !query 11
INSERT INTO CASE2_TBL VALUES (1, NULL)
-- !query 11 schema
struct<>
-- !query 11 output



-- !query 12
INSERT INTO CASE2_TBL VALUES (NULL, -6)
-- !query 12 schema
struct<>
-- !query 12 output



-- !query 13
SELECT '3' AS `One`,
  CASE
    WHEN 1 < 2 THEN 3
  END AS `Simple WHEN`
-- !query 13 schema
struct<One:string,Simple WHEN:int>
-- !query 13 output
3	3


-- !query 14
SELECT '<NULL>' AS `One`,
  CASE
    WHEN 1 > 2 THEN 3
  END AS `Simple default`
-- !query 14 schema
struct<One:string,Simple default:int>
-- !query 14 output
<NULL>	NULL


-- !query 15
SELECT '3' AS `One`,
  CASE
    WHEN 1 < 2 THEN 3
    ELSE 4
  END AS `Simple ELSE`
-- !query 15 schema
struct<One:string,Simple ELSE:int>
-- !query 15 output
3	3


-- !query 16
SELECT '4' AS `One`,
  CASE
    WHEN 1 > 2 THEN 3
    ELSE 4
  END AS `ELSE default`
-- !query 16 schema
struct<One:string,ELSE default:int>
-- !query 16 output
4	4


-- !query 17
SELECT '6' AS `One`,
  CASE
    WHEN 1 > 2 THEN 3
    WHEN 4 < 5 THEN 6
    ELSE 7
  END AS `Two WHEN with default`
-- !query 17 schema
struct<One:string,Two WHEN with default:int>
-- !query 17 output
6	6


-- !query 18
SELECT '7' AS `None`,
  CASE WHEN rand() < 0 THEN 1
  END AS `NULL on no matches`
-- !query 18 schema
struct<None:string,NULL on no matches:int>
-- !query 18 output
7	NULL


-- !query 19
SELECT CASE WHEN 1=0 THEN 1/0 WHEN 1=1 THEN 1 ELSE 2/0 END
-- !query 19 schema
struct<CASE WHEN (1 = 0) THEN (CAST(1 AS DOUBLE) / CAST(0 AS DOUBLE)) WHEN (1 = 1) THEN CAST(1 AS DOUBLE) ELSE (CAST(2 AS DOUBLE) / CAST(0 AS DOUBLE)) END:double>
-- !query 19 output
1.0


-- !query 20
SELECT CASE 1 WHEN 0 THEN 1/0 WHEN 1 THEN 1 ELSE 2/0 END
-- !query 20 schema
struct<CASE WHEN (1 = 0) THEN (CAST(1 AS DOUBLE) / CAST(0 AS DOUBLE)) WHEN (1 = 1) THEN CAST(1 AS DOUBLE) ELSE (CAST(2 AS DOUBLE) / CAST(0 AS DOUBLE)) END:double>
-- !query 20 output
1.0


-- !query 21
SELECT CASE WHEN i > 100 THEN 1/0 ELSE 0 END FROM case_tbl
-- !query 21 schema
struct<CASE WHEN (i > 100) THEN (CAST(1 AS DOUBLE) / CAST(0 AS DOUBLE)) ELSE CAST(0 AS DOUBLE) END:double>
-- !query 21 output
0.0
0.0
0.0
0.0


-- !query 22
SELECT CASE 'a' WHEN 'a' THEN 1 ELSE 2 END
-- !query 22 schema
struct<CASE WHEN (a = a) THEN 1 ELSE 2 END:int>
-- !query 22 output
1


-- !query 23
SELECT '' AS `Five`,
  CASE
    WHEN i >= 3 THEN i
  END AS `>= 3 or Null`
  FROM CASE_TBL
-- !query 23 schema
struct<Five:string,>= 3 or Null:int>
-- !query 23 output
3
	4
	NULL
	NULL


-- !query 24
SELECT '' AS `Five`,
  CASE WHEN i >= 3 THEN (i + i)
       ELSE i
  END AS `Simplest Math`
  FROM CASE_TBL
-- !query 24 schema
struct<Five:string,Simplest Math:int>
-- !query 24 output
1
	2
	6
	8


-- !query 25
SELECT '' AS `Five`, i AS `Value`,
  CASE WHEN (i < 0) THEN 'small'
       WHEN (i = 0) THEN 'zero'
       WHEN (i = 1) THEN 'one'
       WHEN (i = 2) THEN 'two'
       ELSE 'big'
  END AS `Category`
  FROM CASE_TBL
-- !query 25 schema
struct<Five:string,Value:int,Category:string>
-- !query 25 output
1	one
	2	two
	3	big
	4	big


-- !query 26
SELECT '' AS `Five`,
  CASE WHEN ((i < 0) or (i < 0)) THEN 'small'
       WHEN ((i = 0) or (i = 0)) THEN 'zero'
       WHEN ((i = 1) or (i = 1)) THEN 'one'
       WHEN ((i = 2) or (i = 2)) THEN 'two'
       ELSE 'big'
  END AS `Category`
  FROM CASE_TBL
-- !query 26 schema
struct<Five:string,Category:string>
-- !query 26 output
big
	big
	one
	two


-- !query 27
SELECT * FROM CASE_TBL WHERE COALESCE(f,i) = 4
-- !query 27 schema
struct<i:int,f:double>
-- !query 27 output
4	NULL


-- !query 28
SELECT * FROM CASE_TBL WHERE NULLIF(f,i) = 2
-- !query 28 schema
struct<i:int,f:double>
-- !query 28 output



-- !query 29
SELECT COALESCE(a.f, b.i, b.j)
  FROM CASE_TBL a, CASE2_TBL b
-- !query 29 schema
struct<coalesce(f, CAST(i AS DOUBLE), CAST(j AS DOUBLE)):double>
-- !query 29 output
-30.3
-30.3
-30.3
-30.3
-30.3
-30.3
-6.0
1.0
1.0
10.1
10.1
10.1
10.1
10.1
10.1
2.0
2.0
20.2
20.2
20.2
20.2
20.2
20.2
3.0


-- !query 30
SELECT *
  FROM CASE_TBL a, CASE2_TBL b
  WHERE COALESCE(a.f, b.i, b.j) = 2
-- !query 30 schema
struct<i:int,f:double,i:int,j:int>
-- !query 30 output
4	NULL	2	-2
4	NULL	2	-4


-- !query 31
SELECT '' AS Five, NULLIF(a.i,b.i) AS `NULLIF(a.i,b.i)`,
  NULLIF(b.i, 4) AS `NULLIF(b.i,4)`
  FROM CASE_TBL a, CASE2_TBL b
-- !query 31 schema
struct<Five:string,NULLIF(a.i,b.i):int,NULLIF(b.i,4):int>
-- !query 31 output
1	2
	1	2
	1	3
	1	NULL
	2	1
	2	1
	2	3
	2	NULL
	3	1
	3	1
	3	2
	3	2
	3	NULL
	4	1
	4	1
	4	2
	4	2
	4	3
	4	NULL
	NULL	1
	NULL	1
	NULL	2
	NULL	2
	NULL	3


-- !query 32
SELECT '' AS `Two`, *
  FROM CASE_TBL a, CASE2_TBL b
  WHERE COALESCE(f,b.i) = 2
-- !query 32 schema
struct<Two:string,i:int,f:double,i:int,j:int>
-- !query 32 output
4	NULL	2	-2
	4	NULL	2	-4


-- !query 33
SELECT CASE
  (CASE vol('bar')
    WHEN 'foo' THEN 'it was foo!'
    WHEN vol(null) THEN 'null input'
    WHEN 'bar' THEN 'it was bar!' END
  )
  WHEN 'it was foo!' THEN 'foo recognized'
  WHEN 'it was bar!' THEN 'bar recognized'
  ELSE 'unrecognized' END
-- !query 33 schema
struct<CASE WHEN (CASE WHEN (UDF:vol(bar) = foo) THEN it was foo! WHEN (UDF:vol(bar) = UDF:vol(null)) THEN null input WHEN (UDF:vol(bar) = bar) THEN it was bar! END = it was foo!) THEN foo recognized WHEN (CASE WHEN (UDF:vol(bar) = foo) THEN it was foo! WHEN (UDF:vol(bar) = UDF:vol(null)) THEN null input WHEN (UDF:vol(bar) = bar) THEN it was bar! END = it was bar!) THEN bar recognized ELSE unrecognized END:string>
-- !query 33 output
bar recognized


-- !query 34
DROP TABLE CASE_TBL
-- !query 34 schema
struct<>
-- !query 34 output



-- !query 35
DROP TABLE CASE2_TBL
-- !query 35 schema
struct<>
-- !query 35 output



-- !query 36
set spark.sql.crossJoin.enabled=false
-- !query 36 schema
struct<key:string,value:string>
-- !query 36 output
spark.sql.crossJoin.enabled	false
